import java_cup.runtime.Symbol;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.abstraction.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.conditional.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.definition.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.flow_control.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.literal.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.operation.*;
import gr.hua.dit.it22023_it22121.abstract_syntax_tree.type.*;
import java.util.*;

terminal T_byte,T_else,T_false,T_if,T_int,T_proc,T_reference,T_return,T_while,T_true;
terminal T_plus, T_minus, T_times, T_div, T_modulo, T_and, T_or, T_not, T_deq, T_eq, T_neq, T_less, T_greater, T_less_or_eq, T_greater_or_eq;
terminal T_lpar, T_rpar,T_lsquare,T_rsquare,T_lsquigly,T_rsquigly,T_comma,T_colon,T_semicolon;
terminal String T_id;
terminal Integer T_num;
terminal String T_char_literal;
terminal String T_string_literal;

non terminal Program program;
non terminal Function func_def;
non terminal Deque<Parameter> fpar_list;
non terminal Parameter fpar_def;
non terminal BasicType data_type;
non terminal Type type;
non terminal Type r_type;
non terminal Definition local_def;
non terminal Definition var_def;
non terminal Statement stmt;
non terminal Deque<Statement> compound_stmt;
non terminal FunctionCall func_call;
non terminal Deque<Expression> expr_list;
non terminal Expression expr;
non terminal Expression l_value;
non terminal Condition cond;

non terminal Deque<Parameter> fpar_list_extra;
non terminal Deque<Expression> expr_list_extra;
non terminal Deque<Statement> compound_stmt_extra;
non terminal Deque<Definition> func_def_extra;

precedence left T_plus, T_minus;
precedence left T_times, T_div, T_modulo;
precedence left T_and, T_or;
precedence right T_else;

start with program;

program ::= func_def:func                                             {: RESULT = new Program(func);:};

func_def ::= T_id:id T_lpar T_rpar T_colon r_type:ret func_def_extra:defs compound_stmt:stmts {: RESULT = new Function(id,ret,defs,stmts); :}
           | T_id:id T_lpar fpar_list:params T_rpar T_colon r_type:ret func_def_extra:defs compound_stmt:stmts {: RESULT = new Function(id,ret,defs,stmts,params); :}
           ;

func_def_extra ::=                          {: RESULT = new LinkedList<Definition>();:}
                 | local_def:def func_def_extra:list {:list.addFirst(def); RESULT = list;:}
                 ;

fpar_list ::= fpar_def:param fpar_list_extra:param_list               {: param_list.addFirst(param);
	                                                                    RESULT = param_list;  :};

fpar_list_extra ::=                                                   {: RESULT = new LinkedList<Parameter>(); :}
                  | T_comma fpar_def:param fpar_list_extra:param_list {: param_list.addFirst(param); RESULT = param_list;:}
                  ;

fpar_def ::= T_id:id T_colon type:t                                   {: RESULT = new Parameter(id,t,false);:}
           | T_id:id T_colon T_reference type:t                       {: RESULT = new Parameter(id,t,true);:}
           ;

data_type ::= T_int                                                   {: RESULT = BasicType.Int; :}
            | T_byte                                                  {: RESULT = BasicType.Byte; :}
            ;

type ::= data_type:dt                                                 {: RESULT = dt; :}
       | data_type:t T_lsquare T_rsquare                              {: RESULT = new ArrayType(t); :}
       ;

r_type ::= data_type:dt                                               {: RESULT = dt; :}
         | T_proc                                                     {: RESULT = BasicType.Proc; :}
         ;

local_def ::= func_def:func                                           {: RESULT = func; :}
            | var_def:var                                             {: RESULT = var; :}
            ;

var_def ::= T_id:id T_colon data_type:t T_semicolon                   {: RESULT = new IdDef(id,t); :}
          | T_id:id T_colon data_type:t T_lsquare T_num:idx T_rsquare T_semicolon {: RESULT = new IdDef(id,new ArrayType(t,idx));:}
          ;

stmt ::= T_semicolon
       | l_value:id T_eq expr:e T_semicolon                      {: RESULT = new Assignment(id,e); :}
       //| compound_stmt:e                                            //{: RESULT = e; :}
       | func_call:func T_semicolon                                   {:RESULT = func;:}
       | T_if T_lpar cond:c T_rpar stmt:s                           {: RESULT = new If(c,s); :}
       | T_if T_lpar cond:c T_rpar stmt:s T_else stmt:es             {: RESULT = new Else(c,s,es);:}
       | T_if T_lpar cond:c T_rpar stmt:s T_else compound_stmt:es             {: RESULT = new Else(c,s,es);:}
       | T_if T_lpar cond:c T_rpar compound_stmt:s                   {: RESULT = new If(c,s); :}
       | T_if T_lpar cond:c T_rpar compound_stmt:s T_else stmt:es   {: RESULT = new Else(c,s,es);:}
       | T_if T_lpar cond:c T_rpar compound_stmt:s T_else compound_stmt:es {: RESULT = new Else(c,s,es);:}
       | T_while T_lpar cond:c T_rpar stmt:s                        {: RESULT = new While(c,s); :}
       | T_while T_lpar cond:c T_rpar compound_stmt:s               {: RESULT = new While(c,s); :}
       | T_return T_semicolon
       | T_return expr:e T_semicolon                                {: RESULT = new Return(e); :}
       ;

compound_stmt ::= T_lsquigly compound_stmt_extra:e T_rsquigly         {: RESULT = e; :};

compound_stmt_extra ::=                                               {: RESULT = new LinkedList<Statement>(); :}
                      | stmt:s compound_stmt_extra:list               {: list.addFirst(s); RESULT = list; :}
                      ;

func_call ::= T_id:id T_lpar T_rpar                                   {: RESULT = new FunctionCall(id);:}
            | T_id:id T_lpar expr_list:params T_rpar                  {: RESULT = new FunctionCall(id,params);:}
            ;

expr_list ::= expr:e expr_list_extra:expr_list                        {: expr_list.addFirst(e);
                                                                        RESULT = expr_list; :};

expr_list_extra ::=                                                   {: RESULT = new LinkedList<Expression>(); :}
                  | T_comma expr:e expr_list_extra:expr_list          {: expr_list.addFirst(e); RESULT = expr_list;:}
                  ;

expr ::= T_num:e                                                {: RESULT = new Num(e); :}
       | T_char_literal:e                                       {: RESULT = new CharLiteral(e); :}
       | l_value:e                                                    {: RESULT = e;:}
       | T_lpar expr:e T_rpar                                         {: RESULT = e;:}
       | func_call:e                                              {: RESULT = e;:}
       | T_plus expr:e                                          {: RESULT = new PosSign(e);:}
       | T_minus expr:e                                             {: RESULT = new NegSign(e); :}
       | expr:le T_plus expr:re                                       {: RESULT = new PlusOp(le,re); :}
       | expr:le T_minus expr:re                                      {: RESULT = new MinusOp(le,re); :}
       | expr:le T_times expr:re                                      {: RESULT = new TimesOp(le,re); :}
       | expr:le T_div expr:re                                        {: RESULT = new DivisionOp(le,re); :}
       | expr:le T_modulo expr:re                                     {: RESULT = new ModuloOp(le,re); :}
       ;

l_value ::= T_string_literal:s                                        {: RESULT = new StringLiteral(s); :}
          | T_id:id T_lsquare expr:e T_rsquare                        {: RESULT = new ArrayAccess(id,e); :}
          | T_id:id                                                   {: RESULT = new Id(id); :}
          ;

cond ::= expr:l T_deq expr:r                                              {: RESULT = new BinCondition(l,r,BinCondition.DOUBLE_EQUAL); :}
       | expr:l T_neq expr:r                                        {: RESULT = new BinCondition(l,r,BinCondition.NOT_EQUAL); :}
       | expr:l T_less expr:r                        {: RESULT = new BinCondition(l,r,BinCondition.LESS); :}
       | expr:l T_greater expr:r            {: RESULT = new BinCondition(l,r,BinCondition.GREATER); :}
       | expr:l T_less_or_eq expr:r       {: RESULT = new BinCondition(l,r,BinCondition.LESS_OR_EQUAL); :}
       | expr:l T_greater_or_eq expr:r  {: RESULT = new BinCondition(l,r,BinCondition.GREATER_OR_EQUAL); :}
       | T_true                         {: RESULT = BooleanLiteral.TRUE; :}
       | T_false                         {: RESULT = BooleanLiteral.FALSE; :}
       | T_not cond:e                   {:RESULT = new UnaryCondition(e,UnaryCondition.NOT);:}
       | cond:l T_and cond:r             {:RESULT = new BinCondition(l,r,BinCondition.AND);:}
       | cond:l T_or cond:r             {:RESULT = new BinCondition(l,r,BinCondition.OR);:}
       | T_lpar cond:e T_rpar           {:RESULT = e;:}
       ;