Program(
Func(main:PROC)
params{}
local_defs{
    Func(bsort:PROC)
    params{
        Param(n:INT, refrence:no)
        Param(x:INT[], refrence:yes)
    }
    local_defs{
        Func(swap:PROC)
        params{
            Param(x:INT, refrence:yes)
            Param(y:INT, refrence:yes)
        }
        local_defs{
            IdDef(t:INT)
        }
        swap_body{
            Assignment(id(t) = id(x))
            Assignment(id(x) = id(y))
            Assignment(id(y) = id(t))
        }
        IdDef(changed:BYTE)
        IdDef(i:INT)
    }
    bsort_body{
        Assignment(id(changed) = 'y')
        While(id(changed) == 'y'){
            Assignment(id(changed) = 'n')
            Assignment(id(i) = 0)
            While(id(i) < id(n)-1){
                If(x[id(i)] > x[id(i)+1]){
                    call(swap,{x[id(i)],x[id(i)+1]})
                    Assignment(id(changed) = 'y')
                }
                Assignment(id(i) = id(i)+1)
            }
        }
    }
    Func(writeArray:PROC)
    params{
        Param(msg:BYTE[], refrence:yes)
        Param(n:INT, refrence:no)
        Param(x:INT[], refrence:yes)
    }
    local_defs{
        IdDef(i:INT)
    }
    writeArray_body{
        call(writeString,{id(msg)})
        Assignment(id(i) = 0)
        While(id(i) < id(n)){
            If(id(i) > 0){
                call(writeString,{","})
            }
            call(writeInteger,{x[id(i)]})
            Assignment(id(i) = id(i)+1)
        }
        call(writeString,{"\n"})
    }
    IdDef(seed:INT)
    IdDef(x:INT[16])
    IdDef(i:INT)
}
main_body{
    Assignment(id(seed) = 65)
    Assignment(id(i) = 0)
    While(id(i) < 16){
        Assignment(id(seed) = id(seed)*137+220+id(i)%101)
        x[id(i)] = id(seed)
        Assignment(id(i) = id(i)+1)
    }
    call(writeArray,{"Initial array:",16,id(x)})
    call(bsort,{16,id(x)})
    call(writeArray,{"Sorted array:",16,id(x)})
})
 --- TYPE CHECKING  ---
Global:
    { writeString : PROC , [ s:BYTE[] refrence:true ] }
    { readInteger : INT }
    { writeInteger : PROC , [ n:INT refrence:false ] }
    { strlen : INT , [ s:BYTE[] refrence:true ] }
    main:
        { main : PROC }
        { bsort : PROC , [ n:INT refrence:false , x:INT[] refrence:true ] }
        bsort:
            { n : INT , refrence : false }
            { x : INT[] , refrence : true }
            { swap : PROC , [ x:INT refrence:true , y:INT refrence:true ] }
            swap:
                { x : INT , refrence : true }
                { y : INT , refrence : true }
                { t : INT }
            END swap
            { changed : BYTE }
            { i : INT }
        END bsort
        { writeArray : PROC , [ msg:BYTE[] refrence:true , n:INT refrence:false , x:INT[] refrence:true ] }
        writeArray:
            { msg : BYTE[] , refrence : true }
            { n : INT , refrence : false }
            { x : INT[] , refrence : true }
            { i : INT }
        END writeArray
        { seed : INT }
        { x : INT[] }
        { i : INT }
    END main
END Global
Compilation successful, executable is at alan_code_gen/bin/5.Bubble_sort
